#!/usr/bin/env python
#encoding:utf-8

import sys
if not '/usr/local/lib/python2.7/dist-packages' in sys.path:
	sys.path.insert(1, '/usr/local/lib/python2.7/dist-packages')

COPYRIGHT_YEAR=2015
import os
import codecs
# para permitir que la salida de texto sea unicode utf8
sys.stdout = codecs.getwriter('utf-8')(sys.stdout)
import gettext
# Set up message catalog access
t = gettext.translation('pyhello', 'locale', fallback=True)
_ = t.ugettext
PACKAGE="pyHello"
VERSION="0.1"
PACKAGE_NAME=""

import argparse

def print_version():
	out=_("%s (%s) %s\n")%(PACKAGE, PACKAGE_NAME, VERSION)
	out+=_("""
Copyright (C) %d Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.""")% COPYRIGHT_YEAR
	sys.stdout.write(out+'\n')

desc = _("Print a friendly, customizable greeting.")
epi = _("General help using GNU software: <http://www.gnu.org/gethelp/>")
parser = argparse.ArgumentParser(description=desc, epilog=epi)
parser.add_argument("-v", "--version", help=_("output version information and exit"),
					action="store_true")
#argumento booleano, la variable asociada adquiere valor true
parser.add_argument("-t", "--traditional", help=_("use traditional greeting"),
					action="store_true")
# para permitir que el mensaje nuevo sea unicode utf8
parser.add_argument("-g", "--greeting", help=_("use GREETING as the greeting message"), 
					type=lambda s: unicode(s, 'utf8'))
parser.add_argument("-h", "--help", help=_("ayuda"), 
					action="store_true")

args=parser.parse_args()

if args.version:
	print_version()
elif args.greeting:
	sys.stdout.write(args.greeting+"\n")
elif args.traditional:
	sys.stdout.write(_("hello, world")+"\n")
elif args.help:
	print 'chau,chau'
else:
	sys.stdout.write(_("Hello, world!")+"\n")

sys.exit()

